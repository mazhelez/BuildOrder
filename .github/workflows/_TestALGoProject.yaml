name: '_Test AL-GO project'

run-name: 'Test project ${{ inputs.project }}'

on:
  workflow_call:
    inputs:
      shell:
        description: Shell in which you want to run the action (powershell or pwsh)
        required: false
        default: powershell
        type: string
      runsOn:
        description: JSON-formatted string og the types of machine to run the build job on
        required: true
        type: string
      checkoutRef:
        description: Ref to checkout
        required: false
        default: ${{ github.ref }}
        type: string
      project:
        description: Name of the built project
        required: true
        type: string
      projectDependenciesJson:
        description: Dependencies of the built project in compressed Json format
        required: false
        default: '{}'
        type: string
      secrets:
        description: A comma-separated string with the names of the secrets, required for the workflow.
        required: false
        default: ''
        type: string
      parentTelemetryScopeJson:
        description: Specifies the telemetry scope for the telemetry signal
        required: false
        type: string
jobs:
  TestALGoProject:
    runs-on: ${{ fromJson(inputs.runsOn) }}
    name: Test project ${{ inputs.project }}
    steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            ref: ${{ inputs.checkoutRef }}
            lfs: true

        - name: Download thisbuild artifacts
          uses: actions/download-artifact@v3
          with:
            path: '.dependencies'

        - name: Read settings
          uses: mazhelez/AL-Go/Actions/ReadSettings@split-build
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            project: ${{ inputs.project }}

        - name: Get Environment
          uses: mazhelez/AL-Go-Actions/GetBCEnvironment@split-build
          with:
            shell: ${{ inputs.shell }}
            project: ${{ inputs.project }}

        - name: Publish apps to environment
          run: |
            Write-Host "MOCK: Publishing apps to environment. Project: ${{ inputs.project }}"
        - name: Run tests
          run: |
            Write-Host "MOCK: Running tests for project ${{ inputs.project }}"
        - name: Publish artifacts - container event log
          uses: actions/upload-artifact@v3
          if: (failure()) && (hashFiles(format('{0}/ContainerEventLog.evtx',inputs.project)) != '')
          with:
            name: ${{ env.ContainerEventLogArtifactsName }}
            path: '${{ inputs.project }}/ContainerEventLog.evtx'
            if-no-files-found: ignore

        - name: Publish artifacts - test results
          uses: actions/upload-artifact@v3
          if: (success() || failure()) && (hashFiles(format('{0}/TestResults.xml',inputs.project)) != '')
          with:
            name: ${{ env.TestResultsArtifactsName }}
            path: '${{ inputs.project }}/TestResults.xml'
            if-no-files-found: ignore

        - name: Publish artifacts - bcpt test results
          uses: actions/upload-artifact@v3
          if: (success() || failure()) && (hashFiles(format('{0}/bcptTestResults.json',inputs.project)) != '')
          with:
            name: ${{ env.BcptTestResultsArtifactsName }}
            path: '${{ inputs.project }}/bcptTestResults.json'
            if-no-files-found: ignore

        - name: Analyze Test Results
          id: analyzeTestResults
          if: success() || failure()
          uses: mazhelez/AL-Go/Actions/AnalyzeTests@split-build
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            Project: ${{ inputs.project }}

        - name: Cleanup
          if: always()
          uses: mazhelez/AL-Go/Actions/PipelineCleanup@split-build
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            Project: ${{ inputs.project }}
